{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yonseimath/data-science-2022-biginner/blob/feature%2Fjeahyuk/jeahyuk/7_1_%EC%9D%B8%EA%B3%B5_%EC%8B%A0%EA%B2%BD%EB%A7%9D\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FuoCYvFP3rz2"
      },
      "source": [
        "# 인공 신경망"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Abp3s6mi3rz9"
      },
      "source": [
        "<table align=\"left\">\n",
        "  <td>\n",
        "    <a target=\"_blank\" href=\"https://colab.research.google.com/github/rickiepark/hg-mldl/blob/master/7-1.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />구글 코랩에서 실행하기</a>\n",
        "  </td>\n",
        "</table>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XwWkLNnw_8uf",
        "outputId": "06620831-1a88-4fbb-ebbd-2b354b40506b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (1.0.2)\n",
            "Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.4.1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (3.1.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.1.0)\n",
            "Requirement already satisfied: numpy>=1.14.6 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.21.6)\n"
          ]
        }
      ],
      "source": [
        "# 사이킷런 1.1.0 버전에서 SGDClassifier의 loss 매개변수 중 \n",
        "# 로지스틱 손실을 의미하는 'log'가 'log_loss'로 바뀐다는 경고가 발생합니다.\n",
        "# 경고를 방지하기 위해 주피터 노트북의 코드를 'log_loss'로 변경하므로\n",
        "# 사이킷런 1.1.0 버전 이상이 설치되어야 합니다.\n",
        "!pip install -U scikit-learn\n",
        "\n",
        "import sklearn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1-uX2CSm_8ug"
      },
      "outputs": [],
      "source": [
        "# 실행마다 동일한 결과를 얻기 위해 케라스에 랜덤 시드를 사용하고 텐서플로 연산을 결정적으로 만듭니다. \n",
        "import tensorflow as tf\n",
        "\n",
        "tf.keras.utils.set_random_seed(42)\n",
        "tf.config.experimental.enable_op_determinism()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn\n",
        "import tensorflow as tf\n",
        "\n",
        "tf.keras.utils.set_random_seed(42)\n",
        "tf.config.experimental.enable_op_determinism()"
      ],
      "metadata": {
        "id": "QuO7zQczAN0E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u5msa4prlifV"
      },
      "source": [
        "## 패션 MNIST"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fMTyGYIMqUE9",
        "outputId": "f290c64c-201e-48cd-8b1b-ed6c733cd2c7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "32768/29515 [=================================] - 0s 1us/step\n",
            "40960/29515 [=========================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26427392/26421880 [==============================] - 0s 0us/step\n",
            "26435584/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "16384/5148 [===============================================================================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4423680/4422102 [==============================] - 0s 0us/step\n",
            "4431872/4422102 [==============================] - 0s 0us/step\n"
          ]
        }
      ],
      "source": [
        "from tensorflow import keras\n",
        "\n",
        "(train_input, train_target), (test_input, test_target) = keras.datasets.fashion_mnist.load_data()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2-r-EgKgqYkK",
        "outputId": "b9ae0030-050e-4ca7-fe6e-1c3c804e41c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(60000, 28, 28) (60000,)\n"
          ]
        }
      ],
      "source": [
        "print(train_input.shape, train_target.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LAJGYTkFrS6p",
        "outputId": "30a31ec9-54da-4d38-da33-46b2933b7d98"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(10000, 28, 28) (10000,)\n"
          ]
        }
      ],
      "source": [
        "print(test_input.shape, test_target.shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig, axs = plt.subplots(1, 10, figsize=(10,10))\n",
        "for i in range(10):\n",
        "    axs[i].imshow(train_input[i], cmap='gray')\n",
        "    axs[i].axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "lGgWJRr8DHcc",
        "outputId": "58bacb14-fe11-4ead-c0f7-b0bf644de1bc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 10 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        },
        "id": "lAYiLboglZIz",
        "outputId": "6b987b5b-f15b-487c-9240-9048e5affaf9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig, axs = plt.subplots(1, 10, figsize=(10,10))\n",
        "for i in range(10):\n",
        "    axs[i].imshow(train_input[i], cmap='gray_r')\n",
        "    axs[i].axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SZjVIoyqmVy-",
        "outputId": "0fcfb21d-85ba-4f30-e083-46d46b98f104"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[9, 0, 0, 3, 0, 2, 7, 2, 5, 5]\n"
          ]
        }
      ],
      "source": [
        "print([train_target[i] for i in range(10)])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rx32OX7NqNnD",
        "outputId": "f8e19993-1a13-4d16-e5e2-1c2ab096107a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint8), array([6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000]))\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "print(np.unique(train_target, return_counts=True))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lrhnk0zXYj5e"
      },
      "source": [
        "## 로지스틱 회귀로 패션 아이템 분류하기"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2HSAg_UFNH52"
      },
      "outputs": [],
      "source": [
        "train_scaled = train_input / 255.0\n",
        "train_scaled = train_scaled.reshape(-1, 28*28)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kwOFVfpxxuLU",
        "outputId": "cf505a5d-0ad9-4613-fe0a-21f76ee092a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(60000, 784)\n"
          ]
        }
      ],
      "source": [
        "print(train_scaled.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ui3iJlfLNLzr",
        "outputId": "73df523a-9c75-452b-f14f-534f58046884"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8195666666666668\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "\n",
        "# 사이킷런 1.1.0 버전 이하일 경우 'log_loss'를 'log'로 바꾸어 주세요.\n",
        "sc = SGDClassifier(loss='log', max_iter=5, random_state=42)\n",
        "\n",
        "scores = cross_validate(sc, train_scaled, train_target, n_jobs=-1)\n",
        "print(np.mean(scores['test_score']))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.mean(scores['test_score']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zpHShb3kZx9d",
        "outputId": "a828fbe2-0e4e-4253-eadc-9577c300f1e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y0W7D4ED3r0B",
        "tags": []
      },
      "source": [
        "## 인공신경망"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zaFtnKmzcQeJ"
      },
      "source": [
        "### 텐서플로와 케라스"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_WOZURhzcTAi"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rbKFPAUucVkV"
      },
      "outputs": [],
      "source": [
        "from tensorflow import keras"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YdNdad0mcoGD"
      },
      "source": [
        "## 인공신경망으로 모델 만들기"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4smUJC1hOWTF"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_scaled, val_scaled, train_target, val_target = train_test_split(\n",
        "    train_scaled, train_target, test_size=0.2, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G9OwZTRorHWQ",
        "outputId": "510a7934-9995-49e8-b76f-e97d0139d686"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(48000, 784) (48000,)\n"
          ]
        }
      ],
      "source": [
        "print(train_scaled.shape, train_target.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Van_eJ7BOo-y",
        "outputId": "16be8e8b-e048-48ba-d672-563ab8a0ae5f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(12000, 784) (12000,)\n"
          ]
        }
      ],
      "source": [
        "print(val_scaled.shape, val_target.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DEXlpF_8gmJv"
      },
      "outputs": [],
      "source": [
        "dense = keras.layers.Dense(10, activation='softmax', input_shape=(784,))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k8mtAypNPIz7"
      },
      "outputs": [],
      "source": [
        "model = keras.Sequential(dense)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xPTmHpMe3r0D"
      },
      "source": [
        "## 인공신경망으로 패션 아이템 분류하기"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VqJ5dpwwPWPr"
      },
      "outputs": [],
      "source": [
        "model.compile(loss='sparse_categorical_crossentropy', metrics='accuracy')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JLLytXw7UcvB",
        "outputId": "cd94376c-a154-48e7-edbf-93e13ab6f384"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[7 3 5 8 6 9 3 3 9 9]\n"
          ]
        }
      ],
      "source": [
        "print(train_target[:10])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KiZnrOgQP4ps",
        "outputId": "ae52e358-2af4-48bb-ce3b-ad24f17ac513"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "1500/1500 [==============================] - 3s 1ms/step - loss: 0.6058 - accuracy: 0.7932\n",
            "Epoch 2/5\n",
            "1500/1500 [==============================] - 2s 1ms/step - loss: 0.4785 - accuracy: 0.8385\n",
            "Epoch 3/5\n",
            "1500/1500 [==============================] - 2s 1ms/step - loss: 0.4564 - accuracy: 0.8471\n",
            "Epoch 4/5\n",
            "1500/1500 [==============================] - 2s 1ms/step - loss: 0.4435 - accuracy: 0.8539\n",
            "Epoch 5/5\n",
            "1500/1500 [==============================] - 2s 2ms/step - loss: 0.4358 - accuracy: 0.8551\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f329a2c34c0>"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.fit(train_scaled, train_target, epochs=5)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Epoch 1/5\n",
        "# 1500/1500 [==============================] - 3s 1ms/step - loss: 0.6058 - accuracy: 0.7932\n",
        "# Epoch 2/5\n",
        "# 1500/1500 [==============================] - 2s 1ms/step - loss: 0.4785 - accuracy: 0.8385\n",
        "# Epoch 3/5\n",
        "# 1500/1500 [==============================] - 2s 1ms/step - loss: 0.4564 - accuracy: 0.8471\n",
        "# Epoch 4/5\n",
        "# 1500/1500 [==============================] - 2s 1ms/step - loss: 0.4435 - accuracy: 0.8539\n",
        "# Epoch 5/5\n",
        "# 1500/1500 [==============================] - 2s 2ms/step - loss: 0.4358 - accuracy: 0.8551\n",
        "# <keras.callbacks.History at 0x7f329a2c34c0>"
      ],
      "metadata": {
        "id": "zmYpapsA9jsg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OdXPQEXOQIFm",
        "outputId": "95d43563-ca32-479e-82f6-fa4be4c5a0b2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "375/375 [==============================] - 1s 1ms/step - loss: 0.4579 - accuracy: 0.8483\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "[0.45794257521629333, 0.8483333587646484]"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.evaluate(val_scaled, val_target)"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [],
      "name": "7-1 인공 신경망",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "default:Python",
      "language": "python",
      "name": "conda-env-default-py"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}